{"version":3,"file":"EllipsoidGeodesic-8db9ab41.js","sources":["../../../../Source/Core/EllipsoidGeodesic.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport CesiumMath from \"./Math.js\";\n\nfunction setConstants(ellipsoidGeodesic) {\n  var uSquared = ellipsoidGeodesic._uSquared;\n  var a = ellipsoidGeodesic._ellipsoid.maximumRadius;\n  var b = ellipsoidGeodesic._ellipsoid.minimumRadius;\n  var f = (a - b) / a;\n\n  var cosineHeading = Math.cos(ellipsoidGeodesic._startHeading);\n  var sineHeading = Math.sin(ellipsoidGeodesic._startHeading);\n\n  var tanU = (1 - f) * Math.tan(ellipsoidGeodesic._start.latitude);\n\n  var cosineU = 1.0 / Math.sqrt(1.0 + tanU * tanU);\n  var sineU = cosineU * tanU;\n\n  var sigma = Math.atan2(tanU, cosineHeading);\n\n  var sineAlpha = cosineU * sineHeading;\n  var sineSquaredAlpha = sineAlpha * sineAlpha;\n\n  var cosineSquaredAlpha = 1.0 - sineSquaredAlpha;\n  var cosineAlpha = Math.sqrt(cosineSquaredAlpha);\n\n  var u2Over4 = uSquared / 4.0;\n  var u4Over16 = u2Over4 * u2Over4;\n  var u6Over64 = u4Over16 * u2Over4;\n  var u8Over256 = u4Over16 * u4Over16;\n\n  var a0 =\n    1.0 +\n    u2Over4 -\n    (3.0 * u4Over16) / 4.0 +\n    (5.0 * u6Over64) / 4.0 -\n    (175.0 * u8Over256) / 64.0;\n  var a1 = 1.0 - u2Over4 + (15.0 * u4Over16) / 8.0 - (35.0 * u6Over64) / 8.0;\n  var a2 = 1.0 - 3.0 * u2Over4 + (35.0 * u4Over16) / 4.0;\n  var a3 = 1.0 - 5.0 * u2Over4;\n\n  var distanceRatio =\n    a0 * sigma -\n    (a1 * Math.sin(2.0 * sigma) * u2Over4) / 2.0 -\n    (a2 * Math.sin(4.0 * sigma) * u4Over16) / 16.0 -\n    (a3 * Math.sin(6.0 * sigma) * u6Over64) / 48.0 -\n    (Math.sin(8.0 * sigma) * 5.0 * u8Over256) / 512;\n\n  var constants = ellipsoidGeodesic._constants;\n\n  constants.a = a;\n  constants.b = b;\n  constants.f = f;\n  constants.cosineHeading = cosineHeading;\n  constants.sineHeading = sineHeading;\n  constants.tanU = tanU;\n  constants.cosineU = cosineU;\n  constants.sineU = sineU;\n  constants.sigma = sigma;\n  constants.sineAlpha = sineAlpha;\n  constants.sineSquaredAlpha = sineSquaredAlpha;\n  constants.cosineSquaredAlpha = cosineSquaredAlpha;\n  constants.cosineAlpha = cosineAlpha;\n  constants.u2Over4 = u2Over4;\n  constants.u4Over16 = u4Over16;\n  constants.u6Over64 = u6Over64;\n  constants.u8Over256 = u8Over256;\n  constants.a0 = a0;\n  constants.a1 = a1;\n  constants.a2 = a2;\n  constants.a3 = a3;\n  constants.distanceRatio = distanceRatio;\n}\n\nfunction computeC(f, cosineSquaredAlpha) {\n  return (\n    (f * cosineSquaredAlpha * (4.0 + f * (4.0 - 3.0 * cosineSquaredAlpha))) /\n    16.0\n  );\n}\n\nfunction computeDeltaLambda(\n  f,\n  sineAlpha,\n  cosineSquaredAlpha,\n  sigma,\n  sineSigma,\n  cosineSigma,\n  cosineTwiceSigmaMidpoint\n) {\n  var C = computeC(f, cosineSquaredAlpha);\n\n  return (\n    (1.0 - C) *\n    f *\n    sineAlpha *\n    (sigma +\n      C *\n        sineSigma *\n        (cosineTwiceSigmaMidpoint +\n          C *\n            cosineSigma *\n            (2.0 * cosineTwiceSigmaMidpoint * cosineTwiceSigmaMidpoint - 1.0)))\n  );\n}\n\nfunction vincentyInverseFormula(\n  ellipsoidGeodesic,\n  major,\n  minor,\n  firstLongitude,\n  firstLatitude,\n  secondLongitude,\n  secondLatitude\n) {\n  var eff = (major - minor) / major;\n  var l = secondLongitude - firstLongitude;\n\n  var u1 = Math.atan((1 - eff) * Math.tan(firstLatitude));\n  var u2 = Math.atan((1 - eff) * Math.tan(secondLatitude));\n\n  var cosineU1 = Math.cos(u1);\n  var sineU1 = Math.sin(u1);\n  var cosineU2 = Math.cos(u2);\n  var sineU2 = Math.sin(u2);\n\n  var cc = cosineU1 * cosineU2;\n  var cs = cosineU1 * sineU2;\n  var ss = sineU1 * sineU2;\n  var sc = sineU1 * cosineU2;\n\n  var lambda = l;\n  var lambdaDot = CesiumMath.TWO_PI;\n\n  var cosineLambda = Math.cos(lambda);\n  var sineLambda = Math.sin(lambda);\n\n  var sigma;\n  var cosineSigma;\n  var sineSigma;\n  var cosineSquaredAlpha;\n  var cosineTwiceSigmaMidpoint;\n\n  do {\n    cosineLambda = Math.cos(lambda);\n    sineLambda = Math.sin(lambda);\n\n    var temp = cs - sc * cosineLambda;\n    sineSigma = Math.sqrt(\n      cosineU2 * cosineU2 * sineLambda * sineLambda + temp * temp\n    );\n    cosineSigma = ss + cc * cosineLambda;\n\n    sigma = Math.atan2(sineSigma, cosineSigma);\n\n    var sineAlpha;\n\n    if (sineSigma === 0.0) {\n      sineAlpha = 0.0;\n      cosineSquaredAlpha = 1.0;\n    } else {\n      sineAlpha = (cc * sineLambda) / sineSigma;\n      cosineSquaredAlpha = 1.0 - sineAlpha * sineAlpha;\n    }\n\n    lambdaDot = lambda;\n\n    cosineTwiceSigmaMidpoint = cosineSigma - (2.0 * ss) / cosineSquaredAlpha;\n\n    if (isNaN(cosineTwiceSigmaMidpoint)) {\n      cosineTwiceSigmaMidpoint = 0.0;\n    }\n\n    lambda =\n      l +\n      computeDeltaLambda(\n        eff,\n        sineAlpha,\n        cosineSquaredAlpha,\n        sigma,\n        sineSigma,\n        cosineSigma,\n        cosineTwiceSigmaMidpoint\n      );\n  } while (Math.abs(lambda - lambdaDot) > CesiumMath.EPSILON12);\n\n  var uSquared =\n    (cosineSquaredAlpha * (major * major - minor * minor)) / (minor * minor);\n  var A =\n    1.0 +\n    (uSquared *\n      (4096.0 + uSquared * (uSquared * (320.0 - 175.0 * uSquared) - 768.0))) /\n      16384.0;\n  var B =\n    (uSquared *\n      (256.0 + uSquared * (uSquared * (74.0 - 47.0 * uSquared) - 128.0))) /\n    1024.0;\n\n  var cosineSquaredTwiceSigmaMidpoint =\n    cosineTwiceSigmaMidpoint * cosineTwiceSigmaMidpoint;\n  var deltaSigma =\n    B *\n    sineSigma *\n    (cosineTwiceSigmaMidpoint +\n      (B *\n        (cosineSigma * (2.0 * cosineSquaredTwiceSigmaMidpoint - 1.0) -\n          (B *\n            cosineTwiceSigmaMidpoint *\n            (4.0 * sineSigma * sineSigma - 3.0) *\n            (4.0 * cosineSquaredTwiceSigmaMidpoint - 3.0)) /\n            6.0)) /\n        4.0);\n\n  var distance = minor * A * (sigma - deltaSigma);\n\n  var startHeading = Math.atan2(cosineU2 * sineLambda, cs - sc * cosineLambda);\n  var endHeading = Math.atan2(cosineU1 * sineLambda, cs * cosineLambda - sc);\n\n  ellipsoidGeodesic._distance = distance;\n  ellipsoidGeodesic._startHeading = startHeading;\n  ellipsoidGeodesic._endHeading = endHeading;\n  ellipsoidGeodesic._uSquared = uSquared;\n}\n\nvar scratchCart1 = new Cartesian3();\nvar scratchCart2 = new Cartesian3();\nfunction computeProperties(ellipsoidGeodesic, start, end, ellipsoid) {\n  var firstCartesian = Cartesian3.normalize(\n    ellipsoid.cartographicToCartesian(start, scratchCart2),\n    scratchCart1\n  );\n  var lastCartesian = Cartesian3.normalize(\n    ellipsoid.cartographicToCartesian(end, scratchCart2),\n    scratchCart2\n  );\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThanOrEquals(\n    \"value\",\n    Math.abs(\n      Math.abs(Cartesian3.angleBetween(firstCartesian, lastCartesian)) - Math.PI\n    ),\n    0.0125\n  );\n  //>>includeEnd('debug');\n\n  vincentyInverseFormula(\n    ellipsoidGeodesic,\n    ellipsoid.maximumRadius,\n    ellipsoid.minimumRadius,\n    start.longitude,\n    start.latitude,\n    end.longitude,\n    end.latitude\n  );\n\n  ellipsoidGeodesic._start = Cartographic.clone(\n    start,\n    ellipsoidGeodesic._start\n  );\n  ellipsoidGeodesic._end = Cartographic.clone(end, ellipsoidGeodesic._end);\n  ellipsoidGeodesic._start.height = 0;\n  ellipsoidGeodesic._end.height = 0;\n\n  setConstants(ellipsoidGeodesic);\n}\n\n/**\n * Initializes a geodesic on the ellipsoid connecting the two provided planetodetic points.\n *\n * @alias EllipsoidGeodesic\n * @constructor\n *\n * @param {Cartographic} [start] The initial planetodetic point on the path.\n * @param {Cartographic} [end] The final planetodetic point on the path.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the geodesic lies.\n */\nfunction EllipsoidGeodesic(start, end, ellipsoid) {\n  var e = defaultValue(ellipsoid, Ellipsoid.WGS84);\n  this._ellipsoid = e;\n  this._start = new Cartographic();\n  this._end = new Cartographic();\n\n  this._constants = {};\n  this._startHeading = undefined;\n  this._endHeading = undefined;\n  this._distance = undefined;\n  this._uSquared = undefined;\n\n  if (defined(start) && defined(end)) {\n    computeProperties(this, start, end, e);\n  }\n}\n\nObject.defineProperties(EllipsoidGeodesic.prototype, {\n  /**\n   * Gets the ellipsoid.\n   * @memberof EllipsoidGeodesic.prototype\n   * @type {Ellipsoid}\n   * @readonly\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n  },\n\n  /**\n   * Gets the surface distance between the start and end point\n   * @memberof EllipsoidGeodesic.prototype\n   * @type {Number}\n   * @readonly\n   */\n  surfaceDistance: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"distance\", this._distance);\n      //>>includeEnd('debug');\n\n      return this._distance;\n    },\n  },\n\n  /**\n   * Gets the initial planetodetic point on the path.\n   * @memberof EllipsoidGeodesic.prototype\n   * @type {Cartographic}\n   * @readonly\n   */\n  start: {\n    get: function () {\n      return this._start;\n    },\n  },\n\n  /**\n   * Gets the final planetodetic point on the path.\n   * @memberof EllipsoidGeodesic.prototype\n   * @type {Cartographic}\n   * @readonly\n   */\n  end: {\n    get: function () {\n      return this._end;\n    },\n  },\n\n  /**\n   * Gets the heading at the initial point.\n   * @memberof EllipsoidGeodesic.prototype\n   * @type {Number}\n   * @readonly\n   */\n  startHeading: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"distance\", this._distance);\n      //>>includeEnd('debug');\n\n      return this._startHeading;\n    },\n  },\n\n  /**\n   * Gets the heading at the final point.\n   * @memberof EllipsoidGeodesic.prototype\n   * @type {Number}\n   * @readonly\n   */\n  endHeading: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      Check.defined(\"distance\", this._distance);\n      //>>includeEnd('debug');\n\n      return this._endHeading;\n    },\n  },\n});\n\n/**\n * Sets the start and end points of the geodesic\n *\n * @param {Cartographic} start The initial planetodetic point on the path.\n * @param {Cartographic} end The final planetodetic point on the path.\n */\nEllipsoidGeodesic.prototype.setEndPoints = function (start, end) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"start\", start);\n  Check.defined(\"end\", end);\n  //>>includeEnd('debug');\n\n  computeProperties(this, start, end, this._ellipsoid);\n};\n\n/**\n * Provides the location of a point at the indicated portion along the geodesic.\n *\n * @param {Number} fraction The portion of the distance between the initial and final points.\n * @param {Cartographic} [result] The object in which to store the result.\n * @returns {Cartographic} The location of the point along the geodesic.\n */\nEllipsoidGeodesic.prototype.interpolateUsingFraction = function (\n  fraction,\n  result\n) {\n  return this.interpolateUsingSurfaceDistance(\n    this._distance * fraction,\n    result\n  );\n};\n\n/**\n * Provides the location of a point at the indicated distance along the geodesic.\n *\n * @param {Number} distance The distance from the inital point to the point of interest along the geodesic\n * @param {Cartographic} [result] The object in which to store the result.\n * @returns {Cartographic} The location of the point along the geodesic.\n *\n * @exception {DeveloperError} start and end must be set before calling function interpolateUsingSurfaceDistance\n */\nEllipsoidGeodesic.prototype.interpolateUsingSurfaceDistance = function (\n  distance,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"distance\", this._distance);\n  //>>includeEnd('debug');\n\n  var constants = this._constants;\n\n  var s = constants.distanceRatio + distance / constants.b;\n\n  var cosine2S = Math.cos(2.0 * s);\n  var cosine4S = Math.cos(4.0 * s);\n  var cosine6S = Math.cos(6.0 * s);\n  var sine2S = Math.sin(2.0 * s);\n  var sine4S = Math.sin(4.0 * s);\n  var sine6S = Math.sin(6.0 * s);\n  var sine8S = Math.sin(8.0 * s);\n\n  var s2 = s * s;\n  var s3 = s * s2;\n\n  var u8Over256 = constants.u8Over256;\n  var u2Over4 = constants.u2Over4;\n  var u6Over64 = constants.u6Over64;\n  var u4Over16 = constants.u4Over16;\n  var sigma =\n    (2.0 * s3 * u8Over256 * cosine2S) / 3.0 +\n    s *\n      (1.0 -\n        u2Over4 +\n        (7.0 * u4Over16) / 4.0 -\n        (15.0 * u6Over64) / 4.0 +\n        (579.0 * u8Over256) / 64.0 -\n        (u4Over16 - (15.0 * u6Over64) / 4.0 + (187.0 * u8Over256) / 16.0) *\n          cosine2S -\n        ((5.0 * u6Over64) / 4.0 - (115.0 * u8Over256) / 16.0) * cosine4S -\n        (29.0 * u8Over256 * cosine6S) / 16.0) +\n    (u2Over4 / 2.0 -\n      u4Over16 +\n      (71.0 * u6Over64) / 32.0 -\n      (85.0 * u8Over256) / 16.0) *\n      sine2S +\n    ((5.0 * u4Over16) / 16.0 -\n      (5.0 * u6Over64) / 4.0 +\n      (383.0 * u8Over256) / 96.0) *\n      sine4S -\n    s2 *\n      ((u6Over64 - (11.0 * u8Over256) / 2.0) * sine2S +\n        (5.0 * u8Over256 * sine4S) / 2.0) +\n    ((29.0 * u6Over64) / 96.0 - (29.0 * u8Over256) / 16.0) * sine6S +\n    (539.0 * u8Over256 * sine8S) / 1536.0;\n\n  var theta = Math.asin(Math.sin(sigma) * constants.cosineAlpha);\n  var latitude = Math.atan((constants.a / constants.b) * Math.tan(theta));\n\n  // Redefine in terms of relative argument of latitude.\n  sigma = sigma - constants.sigma;\n\n  var cosineTwiceSigmaMidpoint = Math.cos(2.0 * constants.sigma + sigma);\n\n  var sineSigma = Math.sin(sigma);\n  var cosineSigma = Math.cos(sigma);\n\n  var cc = constants.cosineU * cosineSigma;\n  var ss = constants.sineU * sineSigma;\n\n  var lambda = Math.atan2(\n    sineSigma * constants.sineHeading,\n    cc - ss * constants.cosineHeading\n  );\n\n  var l =\n    lambda -\n    computeDeltaLambda(\n      constants.f,\n      constants.sineAlpha,\n      constants.cosineSquaredAlpha,\n      sigma,\n      sineSigma,\n      cosineSigma,\n      cosineTwiceSigmaMidpoint\n    );\n\n  if (defined(result)) {\n    result.longitude = this._start.longitude + l;\n    result.latitude = latitude;\n    result.height = 0.0;\n    return result;\n  }\n\n  return new Cartographic(this._start.longitude + l, latitude, 0.0);\n};\nexport default EllipsoidGeodesic;\n"],"names":["computeDeltaLambda","f","sineAlpha","cosineSquaredAlpha","sigma","sineSigma","cosineSigma","cosineTwiceSigmaMidpoint","C","scratchCart1","Cartesian3","scratchCart2","computeProperties","ellipsoidGeodesic","start","end","ellipsoid","uSquared","a","b","cosineHeading","sineHeading","tanU","cosineU","sineU","sineSquaredAlpha","cosineAlpha","u2Over4","u4Over16","u6Over64","u8Over256","a0","a1","a2","a3","distanceRatio","constants","firstCartesian","normalize","cartographicToCartesian","lastCartesian","Check","typeOf","number","greaterThanOrEquals","Math","abs","angleBetween","PI","major","minor","firstLongitude","firstLatitude","secondLongitude","secondLatitude","eff","l","u1","atan","tan","u2","cosineU1","cos","sineU1","sin","cosineU2","sineU2","cc","cs","ss","sc","lambda","lambdaDot","CesiumMath","TWO_PI","cosineLambda","sineLambda","temp","sqrt","atan2","isNaN","EPSILON12","B","cosineSquaredTwiceSigmaMidpoint","distance","startHeading","endHeading","_distance","_startHeading","_endHeading","_uSquared","vincentyInverseFormula","maximumRadius","minimumRadius","longitude","latitude","_start","Cartographic","clone","_end","height","_ellipsoid","_constants","EllipsoidGeodesic","e","defaultValue","Ellipsoid","WGS84","this","undefined","defined","Object","defineProperties","prototype","get","surfaceDistance","setEndPoints","interpolateUsingFraction","fraction","result","interpolateUsingSurfaceDistance","s","cosine2S","cosine4S","cosine6S","sine2S","sine4S","sine6S","sine8S","s2","s3","theta","asin"],"mappings":"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"}