{"version":3,"file":"WallGeometryLibrary-8cb3e0c0.js","sources":["../../../../Source/Core/WallGeometryLibrary.js"],"sourcesContent":["import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport defined from \"./defined.js\";\nimport CesiumMath from \"./Math.js\";\nimport PolylinePipeline from \"./PolylinePipeline.js\";\n\n/**\n * @private\n */\nvar WallGeometryLibrary = {};\n\nfunction latLonEquals(c0, c1) {\n  return (\n    CesiumMath.equalsEpsilon(c0.latitude, c1.latitude, CesiumMath.EPSILON10) &&\n    CesiumMath.equalsEpsilon(c0.longitude, c1.longitude, CesiumMath.EPSILON10)\n  );\n}\n\nvar scratchCartographic1 = new Cartographic();\nvar scratchCartographic2 = new Cartographic();\nfunction removeDuplicates(ellipsoid, positions, topHeights, bottomHeights) {\n  positions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon, true);\n\n  var length = positions.length;\n  if (length < 2) {\n    return;\n  }\n\n  var hasBottomHeights = defined(bottomHeights);\n  var hasTopHeights = defined(topHeights);\n  var hasAllZeroHeights = true;\n\n  var cleanedPositions = new Array(length);\n  var cleanedTopHeights = new Array(length);\n  var cleanedBottomHeights = new Array(length);\n\n  var v0 = positions[0];\n  cleanedPositions[0] = v0;\n\n  var c0 = ellipsoid.cartesianToCartographic(v0, scratchCartographic1);\n  if (hasTopHeights) {\n    c0.height = topHeights[0];\n  }\n\n  hasAllZeroHeights = hasAllZeroHeights && c0.height <= 0;\n\n  cleanedTopHeights[0] = c0.height;\n\n  if (hasBottomHeights) {\n    cleanedBottomHeights[0] = bottomHeights[0];\n  } else {\n    cleanedBottomHeights[0] = 0.0;\n  }\n\n  var index = 1;\n  for (var i = 1; i < length; ++i) {\n    var v1 = positions[i];\n    var c1 = ellipsoid.cartesianToCartographic(v1, scratchCartographic2);\n    if (hasTopHeights) {\n      c1.height = topHeights[i];\n    }\n    hasAllZeroHeights = hasAllZeroHeights && c1.height <= 0;\n\n    if (!latLonEquals(c0, c1)) {\n      cleanedPositions[index] = v1; // Shallow copy!\n      cleanedTopHeights[index] = c1.height;\n\n      if (hasBottomHeights) {\n        cleanedBottomHeights[index] = bottomHeights[i];\n      } else {\n        cleanedBottomHeights[index] = 0.0;\n      }\n\n      Cartographic.clone(c1, c0);\n      ++index;\n    } else if (c0.height < c1.height) {\n      cleanedTopHeights[index - 1] = c1.height;\n    }\n  }\n\n  if (hasAllZeroHeights || index < 2) {\n    return;\n  }\n\n  cleanedPositions.length = index;\n  cleanedTopHeights.length = index;\n  cleanedBottomHeights.length = index;\n\n  return {\n    positions: cleanedPositions,\n    topHeights: cleanedTopHeights,\n    bottomHeights: cleanedBottomHeights,\n  };\n}\n\nvar positionsArrayScratch = new Array(2);\nvar heightsArrayScratch = new Array(2);\nvar generateArcOptionsScratch = {\n  positions: undefined,\n  height: undefined,\n  granularity: undefined,\n  ellipsoid: undefined,\n};\n\n/**\n * @private\n */\nWallGeometryLibrary.computePositions = function (\n  ellipsoid,\n  wallPositions,\n  maximumHeights,\n  minimumHeights,\n  granularity,\n  duplicateCorners\n) {\n  var o = removeDuplicates(\n    ellipsoid,\n    wallPositions,\n    maximumHeights,\n    minimumHeights\n  );\n\n  if (!defined(o)) {\n    return;\n  }\n\n  wallPositions = o.positions;\n  maximumHeights = o.topHeights;\n  minimumHeights = o.bottomHeights;\n\n  var length = wallPositions.length;\n  var numCorners = length - 2;\n  var topPositions;\n  var bottomPositions;\n\n  var minDistance = CesiumMath.chordLength(\n    granularity,\n    ellipsoid.maximumRadius\n  );\n\n  var generateArcOptions = generateArcOptionsScratch;\n  generateArcOptions.minDistance = minDistance;\n  generateArcOptions.ellipsoid = ellipsoid;\n\n  if (duplicateCorners) {\n    var count = 0;\n    var i;\n\n    for (i = 0; i < length - 1; i++) {\n      count +=\n        PolylinePipeline.numberOfPoints(\n          wallPositions[i],\n          wallPositions[i + 1],\n          minDistance\n        ) + 1;\n    }\n\n    topPositions = new Float64Array(count * 3);\n    bottomPositions = new Float64Array(count * 3);\n\n    var generateArcPositions = positionsArrayScratch;\n    var generateArcHeights = heightsArrayScratch;\n    generateArcOptions.positions = generateArcPositions;\n    generateArcOptions.height = generateArcHeights;\n\n    var offset = 0;\n    for (i = 0; i < length - 1; i++) {\n      generateArcPositions[0] = wallPositions[i];\n      generateArcPositions[1] = wallPositions[i + 1];\n\n      generateArcHeights[0] = maximumHeights[i];\n      generateArcHeights[1] = maximumHeights[i + 1];\n\n      var pos = PolylinePipeline.generateArc(generateArcOptions);\n      topPositions.set(pos, offset);\n\n      generateArcHeights[0] = minimumHeights[i];\n      generateArcHeights[1] = minimumHeights[i + 1];\n\n      bottomPositions.set(\n        PolylinePipeline.generateArc(generateArcOptions),\n        offset\n      );\n\n      offset += pos.length;\n    }\n  } else {\n    generateArcOptions.positions = wallPositions;\n    generateArcOptions.height = maximumHeights;\n    topPositions = new Float64Array(\n      PolylinePipeline.generateArc(generateArcOptions)\n    );\n\n    generateArcOptions.height = minimumHeights;\n    bottomPositions = new Float64Array(\n      PolylinePipeline.generateArc(generateArcOptions)\n    );\n  }\n\n  return {\n    bottomPositions: bottomPositions,\n    topPositions: topPositions,\n    numCorners: numCorners,\n  };\n};\nexport default WallGeometryLibrary;\n"],"names":["WallGeometryLibrary","scratchCartographic1","Cartographic","scratchCartographic2","removeDuplicates","ellipsoid","positions","topHeights","bottomHeights","length","arrayRemoveDuplicates","Cartesian3","equalsEpsilon","hasBottomHeights","defined","hasTopHeights","hasAllZeroHeights","cleanedPositions","Array","cleanedTopHeights","cleanedBottomHeights","v0","c0","cartesianToCartographic","height","c1","index","i","v1","CesiumMath","latitude","EPSILON10","longitude","clone","positionsArrayScratch","heightsArrayScratch","generateArcOptionsScratch","undefined","granularity","computePositions","wallPositions","maximumHeights","minimumHeights","duplicateCorners","o","topPositions","bottomPositions","numCorners","minDistance","chordLength","maximumRadius","generateArcOptions","count","PolylinePipeline","numberOfPoints","Float64Array","generateArcPositions","generateArcHeights","offset","pos","generateArc","set"],"mappings":"mLAUA,IAAIA,EAAsB,GAS1B,IAAIC,EAAuB,IAAIC,eAC3BC,EAAuB,IAAID,eAC/B,SAASE,EAAiBC,EAAWC,EAAWC,EAAYC,GAG1D,IAAIC,GAFJH,EAAYI,wBAAsBJ,EAAWK,aAAWC,eAAe,IAEhDH,OACvB,KAAIA,EAAS,GAAb,CAIA,IAAII,EAAmBC,UAAQN,GAC3BO,EAAgBD,UAAQP,GACxBS,GAAoB,EAEpBC,EAAmB,IAAIC,MAAMT,GAC7BU,EAAoB,IAAID,MAAMT,GAC9BW,EAAuB,IAAIF,MAAMT,GAEjCY,EAAKf,EAAU,GACnBW,EAAiB,GAAKI,EAEtB,IAAIC,EAAKjB,EAAUkB,wBAAwBF,EAAIpB,GAC3Cc,IACFO,EAAGE,OAASjB,EAAW,IAGzBS,EAAoBA,GAAqBM,EAAGE,QAAU,EAEtDL,EAAkB,GAAKG,EAAGE,OAGxBJ,EAAqB,GADnBP,EACwBL,EAAc,GAEd,EAI5B,IADA,IA3CoBc,EAAIG,EA2CpBC,EAAQ,EACHC,EAAI,EAAGA,EAAIlB,IAAUkB,EAAG,CAC/B,IAAIC,EAAKtB,EAAUqB,GACfF,EAAKpB,EAAUkB,wBAAwBK,EAAIzB,GAC3CY,IACFU,EAAGD,OAASjB,EAAWoB,IAEzBX,EAAoBA,GAAqBS,EAAGD,QAAU,EAlDpCF,EAoDAA,EApDIG,EAoDAA,EAlDtBI,aAAWjB,cAAcU,EAAGQ,SAAUL,EAAGK,SAAUD,aAAWE,YAC9DF,aAAWjB,cAAcU,EAAGU,UAAWP,EAAGO,UAAWH,aAAWE,WA6DrDT,EAAGE,OAASC,EAAGD,SACxBL,EAAkBO,EAAQ,GAAKD,EAAGD,SAZlCP,EAAiBS,GAASE,EAC1BT,EAAkBO,GAASD,EAAGD,OAG5BJ,EAAqBM,GADnBb,EAC4BL,EAAcmB,GAEd,EAGhCzB,eAAa+B,MAAMR,EAAIH,KACrBI,GAMN,KAAIV,GAAqBU,EAAQ,GAQjC,OAJAT,EAAiBR,OAASiB,EAC1BP,EAAkBV,OAASiB,EAC3BN,EAAqBX,OAASiB,EAEvB,CACLpB,UAAWW,EACXV,WAAYY,EACZX,cAAeY,IAInB,IAAIc,EAAwB,IAAIhB,MAAM,GAClCiB,EAAsB,IAAIjB,MAAM,GAChCkB,EAA4B,CAC9B9B,eAAW+B,EACXb,YAAQa,EACRC,iBAAaD,EACbhC,eAAWgC,GAMbrC,EAAoBuC,iBAAmB,SACrClC,EACAmC,EACAC,EACAC,EACAJ,EACAK,GAEA,IAAIC,EAAIxC,EACNC,EACAmC,EACAC,EACAC,GAGF,GAAK5B,UAAQ8B,GAAb,CAIAJ,EAAgBI,EAAEtC,UAClBmC,EAAiBG,EAAErC,WACnBmC,EAAiBE,EAAEpC,cAEnB,IAEIqC,EACAC,EAHArC,EAAS+B,EAAc/B,OACvBsC,EAAatC,EAAS,EAItBuC,EAAcnB,aAAWoB,YAC3BX,EACAjC,EAAU6C,eAGRC,EAAqBf,EAIzB,GAHAe,EAAmBH,YAAcA,EACjCG,EAAmB9C,UAAYA,EAE3BsC,EAAkB,CAIpB,IAHA,IAAIS,EAAQ,EAGPzB,EAAI,EAAGA,EAAIlB,EAAS,EAAGkB,IAC1ByB,GACEC,mBAAiBC,eACfd,EAAcb,GACda,EAAcb,EAAI,GAClBqB,GACE,EAGRH,EAAe,IAAIU,aAAqB,EAARH,GAChCN,EAAkB,IAAIS,aAAqB,EAARH,GAEnC,IAAII,EAAuBtB,EACvBuB,EAAqBtB,EACzBgB,EAAmB7C,UAAYkD,EAC/BL,EAAmB3B,OAASiC,EAE5B,IAAIC,EAAS,EACb,IAAK/B,EAAI,EAAGA,EAAIlB,EAAS,EAAGkB,IAAK,CAC/B6B,EAAqB,GAAKhB,EAAcb,GACxC6B,EAAqB,GAAKhB,EAAcb,EAAI,GAE5C8B,EAAmB,GAAKhB,EAAed,GACvC8B,EAAmB,GAAKhB,EAAed,EAAI,GAE3C,IAAIgC,EAAMN,mBAAiBO,YAAYT,GACvCN,EAAagB,IAAIF,EAAKD,GAEtBD,EAAmB,GAAKf,EAAef,GACvC8B,EAAmB,GAAKf,EAAef,EAAI,GAE3CmB,EAAgBe,IACdR,mBAAiBO,YAAYT,GAC7BO,GAGFA,GAAUC,EAAIlD,aAGhB0C,EAAmB7C,UAAYkC,EAC/BW,EAAmB3B,OAASiB,EAC5BI,EAAe,IAAIU,aACjBF,mBAAiBO,YAAYT,IAG/BA,EAAmB3B,OAASkB,EAC5BI,EAAkB,IAAIS,aACpBF,mBAAiBO,YAAYT,IAIjC,MAAO,CACLL,gBAAiBA,EACjBD,aAAcA,EACdE,WAAYA"}